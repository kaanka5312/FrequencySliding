ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col=col.alpha(colors[2],0.5))
#shade( apply(ACW_sim, 2, PI), xseq, col = col.alpha(colors[2],0.01))
colMeanPlot[,s] = colMeans(ACW_sim)
}
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col=col.alpha(colors[2],0.5))
#shade( apply(ACW_sim, 2, PI), xseq, col = col.alpha(colors[2],0.01))
colMeanPlot[,s] = colMeans(ACW_sim)
}
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col=col = adjustcolor(colors[2], alpha.f = 0.4))
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col= adjustcolor(colors[2], alpha.f = 0.4))
#shade( apply(ACW_sim, 2, PI), xseq, col = col.alpha(colors[2],0.01))
colMeanPlot[,s] = colMeans(ACW_sim)
}
s
n_subj
post$ac_subj_nonself
n_subj = 10
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col= adjustcolor(colors[2], alpha.f = 0.4))
#shade( apply(ACW_sim, 2, PI), xseq, col = col.alpha(colors[2],0.01))
colMeanPlot[,s] = colMeans(ACW_sim)
}
s
n_subj = 10
xseq <- seq(from = -2 , to = 2 , length = n_subj)
colors <- rainbow(2) # Generate distinct colors for self and nonself
#=+=+=+=+=+=+=+=+ N O N - S E L F =+=+=+=+=+=+=+=+=+=+ #
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
par(mar = c(5, 6, 4, 2) + 0.1)
plot(NULL,type = "l", ylim= c(-2.5,2.5),xlim=c(-2.5,2.5),
xlab = "Standardized Recurrent",
ylab = "Standardized ACW",
main= "ACW - MY for each subject",
cex.main = 2,
cex.lab = 2,
cex.axis = 2)
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col= adjustcolor(colors[2], alpha.f = 0.4))
#shade( apply(ACW_sim, 2, PI), xseq, col = col.alpha(colors[2],0.01))
colMeanPlot[,s] = colMeans(ACW_sim)
}
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col= adjustcolor(colors[2], alpha.f = 0.8))
#shade( apply(ACW_sim, 2, PI), xseq, col = col.alpha(colors[2],0.01))
colMeanPlot[,s] = colMeans(ACW_sim)
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = adjustcolor("black", alpha.f = 0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_self[,s] + bc_subj_self[,s]*xseq[i],
sigma_2 )
))
lines(xseq, y = colMeans(ACW_sim),col=adjustcolor(colors[1], alpha.f = 0.8))
#shade( apply(ACW_sim, 2, PI), xseq, col = col.alpha(colors[1],0.01))
colMeanPlot[,s] = colMeans(ACW_sim)
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, lty=2, col = adjustcolor("black", alpha.f = 0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized Recurrrent",
ylab = "Standardized GSCORR",
main = "Total Effect of MY on GSCORR",
cex.main = 2,
cex.lab = 2,
cex.axis = 2)
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
#lines(xseq, y = colMeans(ACW_sim))
#shade( apply(ACW_sim, 2, PI), xseq)
GS_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
a_subj_nonself[,s] + b_subj_nonself[,s] * xseq[i] +
c_subj_nonself[,s] * ACW_sim[,i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim), col=adjustcolor(colors[2], alpha.f = 0.8))
# shade( apply(GS_sim, 2, PI), xseq,col = col.alpha("gray",0.003))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = adjustcolor("black", alpha.f = 0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
ac_subj_self[,s] + bc_subj_self[,s]*xseq[i],
sigma_2 )
))
#lines(xseq, y = colMeans(ACW_sim))
#shade( apply(ACW_sim, 2, PI), xseq)
GS_sim <- with(post, sapply(1:n_subj, function(i) rnorm(1e3,
a_subj_self[,s] + b_subj_self[,s] * xseq[i] +
c_subj_self[,s] * ACW_sim[,i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim), col=adjustcolor(colors[1], alpha.f = 0.8))
# shade( apply(GS_sim, 2, PI), xseq,col = col.alpha("gray",0.003))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = adjustcolor("black", alpha.f = 0.8))
par(mar = c(5, 6, 4, 2) + 0.1)
#=+=+=+=+=+=+=+=+ N O N - S E L F =+=+=+=+=+=+=+=+=+=+ #
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW",
ylab = "Standardized GSCORR",
main = "Counterfacted relationship",
cex.main = 2,
cex.lab = 2,
cex.axis = 2)
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:n_subj, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[2],0.4))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW",
ylab = "Standardized GSCORR",
main = "Counterfacted relationship",
cex.main = 2,
cex.lab = 2,
cex.axis = 2)
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:n_subj, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=adjustcolor(colors[2], alpha.f = 0.8))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = adjustcolor("black", alpha.f = 0.8))
(rowMeans(colMeanPlot)[1] - rowMeans(colMeanPlot)[n_subj]) / (xseq[1] - xseq[n_subj])
rho_true <- 0.7  # true sensitivity parameter for omitted confounding
r <- ACW_std - mu_ACW  # mediator residual
# Compute outcome baseline (without adjustment) as in the unconfounded model:
mu_GS_base <- a_subj_self[subj_id] * self +
b_subj_self[subj_id] * MY_std * self +
c_subj_self[subj_id] * ACW_std * self +
a_subj_nonself[subj_id] * nonself +
b_subj_nonself[subj_id] * MY_std * nonself +
c_subj_nonself[subj_id] * ACW_std * nonself
# Adjust outcome mean with the sensitivity term:
mu_GS <- mu_GS_base + rho_true * (sigma_outcome / sigma_2) * r
GS_std <- rnorm(N, mean = mu_GS, sd = sigma_outcome)
# ---------------- Bundle Data for Stan ----------------
data_list <- list(
n_subj    = n_subj,
n_regions = n_regions,
self      = self,
nonself   = nonself,
GS_std    = GS_std,
MY_std    = MY_std,
ACW_std   = ACW_std,
G         = subj_id,
rho       = rho_true
)
# Optional: Inspect the structure of the data list
str(data_list)
fit <- sampling(confounded_mode, data=data_list, iter=2000, chains =4, cores=6)
mcmc_areas(posterior,
pars = c("rho"),
prob = 0.9)
posterior <- as.matrix(fit)
mcmc_areas(posterior,
pars = c("rho"),
prob = 0.9)
posterior <- as.matrix(fit)
mcmc_areas(posterior,
pars = c("rho"),
prob = 0.9)
n_subj = 10
xseq <- seq(from = -2 , to = 2 , length = n_subj)
colors <- rainbow(2) # Generate distinct colors for self and nonself
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW",
ylab = "Standardized GSCORR",
main = "Counterfacted relationship",
cex.main = 2,
cex.lab = 2,
cex.axis = 2)
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:n_subj, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=adjustcolor(colors[2], alpha.f = 0.8))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = adjustcolor("black", alpha.f = 0.8))
(rowMeans(colMeanPlot)[1] - rowMeans(colMeanPlot)[n_subj]) / (xseq[1] - xseq[n_subj])
# Libraries
library(rethinking)
library(dagitty)
library(rstan)
library(R.matlab)
library(rstatix)
library(tidyverse)
library(readxl)
library(ggpubr)
library(ggsci)
#test <- readMat("~/MYELIN_2/DATA/MED.mat")
test <- readMat("/home/kaanka5312/projects/MYELIN_2/DATA/MED.mat")
#p2 <- readMat( "~/MYELIN_2/DATA/7t_replication_detrended.mat" )
#test <- readMat("C:/Users/kaan/Documents/MYELIN_2/DATA/MED.mat")
# p2 <- readMat( "/home/kaansocat/MYELIN/DATA/7t_replication_detrended.mat" )
# This ends up with
# file = "F:/7T_variable/HierReplication_detrended.RData" created in the end with above
#p2 <- readMat( "C:/Users/kaan/Documents/MYELIN_2/DATA/7t_final.mat" )
p2 <- readMat( "/home/kaanka5312/projects/MYELIN_2/DATA/7T_final.mat" )
MY <- c(t(p2$myelin.replication))
# MY[1:360] == p2$myelin.replication[1,1:360]
# Given all true, meaning that rows are added togather, each row is a subject
#ACW0 <- c(t(p2$ACW0.replication))
ACW0 <- c(t(p2$ACW0.GS.replication))
# ACW0[1:360] == p2$ACW0.replication[1,1:360]
# Given all true, meaning that rows are added togather, each row is a subject
GS <- c(t(p2$GSCORR.GS.replication))
# GS[1:360] == p2$GSCORR.replication[1,1:360]
# Given all true, meaning that rows are added togather, each row is a subject
subj <- rep(1:164, each = 360)
G <- rep(test$MED[,5],164)
self <- G - 1
nonself <- 1 - self
d_subj2 <- list(MY_std = standardize(MY) ,
ACW_std = standardize(GS),
G = subj,
self = self ,
nonself = nonself,
n_subj = 164,
n_regions = 360
)
linear_model <- NeuroMyelFC::compile_linear_model()
linear_model <- NeuroMyelFC::compile_linear_model()
linear_model <- NeuroMyelFC::compile_linear_model()
linear_model <- NeuroMyelFC::compile_linear_model()
linear_model <- NeuroMyelFC::compile_linear_model()
linear_model <- NeuroMyelFC::compile_linear_model()
> linear_model <- NeuroMyelFC::compile_linear_model()
linear_model <- NeuroMyelFC::compile_linear_model()
linear_model <- NeuroMyelFC::compile_linear_model()
library(R.matlab)
test <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/BOLD_all_subjects_BP.mat")
test <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/BOLD_all_subjects_HC.mat")
setwd("~/projects/FrequencySliding/")
BP <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/BOLD_all_subjects_BP.mat")
str(Bp)
str(BP)
library(NeuroMyelFC)
BP <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_BP.mat")
str(BP)
BP$PF.all.slow4[[1]]
BP$PF.all.slow4[[1]][[1]]
BP$PF.all.slow4[[1]][,,1]
BP$PF.all.slow4[[1]][1]
BP$PF.all.slow4[[1]]
BP$PF.all.slow4[[1]]["PF.peak",,1]
str(BP$PF.all.slow4[[1]])
BP$PF.all.slow4[[1]][[1]]
BP$PF.all.slow4[[1]]$PF.peak
BP$PF.all.slow4[[1]][[1]]["PF.peak", 1, 1][[1]]
BP$PF.all.slow4[[2]][[1]]["PF.peak", 1, 1][[1]]
BP$PF.all.slow4[[3]][[1]]["PF.peak", 1, 1][[1]]
n_controls <- 20
PF_peak_controls <- t(sapply(BP$PF.all.slow4[1:n_controls], function(x) {
x[[1]]["PF.peak", 1, 1][[1]]
}))
n_bp <- 20
PF_whole_bp <- t(sapply(BP$PF.all.slow4[1:n_bp], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
HC <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_HC.mat")
HC
HC <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_HC.mat")
n_bp <- 33
PF_whole_hc <- t(sapply(HC$PF.all.slow4[1:n_bp], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
PF_whole_bp <- t(sapply(BP$PF.all.slow4[1:n_bp], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
HC <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_HC.mat")
n_hc <- 33
PF_whole_hc <- t(sapply(HC$PF.all.slow4[1:n_bp], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
PF_whole_all <- cbind(PF_whole_bp,PF_whole_hc)
PF_whole_all <- rbind(PF_whole_bp,PF_whole_hc)
PF_whole_bp
PF_whole_all <- rbind(PF_whole_bp,PF_whole_hc)
BP <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_BP.mat")
n_bp <- 20
PF_whole_bp <- t(sapply(BP$PF.all.slow4[1:n_bp], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
PF_whole_bp
HC <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_HC.mat")
n_hc <- 33
PF_whole_hc <- t(sapply(HC$PF.all.slow4[1:n_hc], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
PF_whole_hc
rbind(PF_whole_bp,PF_whole_hc)
PF_whole_all <- rbind(PF_whole_bp,PF_whole_hc)
NeuroMyelFC::uni_self
list(NeuroMyelFC::trans_nonself )
mask_list <- list(trans_self = NeuroMyelFC::trans_self,
trans_nonself = NeuroMyelFC::trans_nonself,
uni_self = NeuroMyelFC::uni_self,
uni_nonself = NeuroMyelFC::uni_nonself )
mask_list
str(PF_whole_all)
sapply(mask_list, function(mask) {
rowMeans(PF_whole_all[,mask])
})
PF_all_topo <- sapply(mask_list, function(mask) {
rowMeans(PF_whole_all[,mask])
})
str(PF_all_topo)
NeuroMyelFC::calculate_prs()
edit (NeuroMyelFC::calculate_prs())
source NeuroMyelFC::calculate_prs()
melt(PE_whole_all)
reshape2::melt(PE_whole_all)
reshape2::melt(PE_whole_topo)
reshape2::melt(PF_whole_topo)
reshape2::melt(PF_all_topo)
reshape2::melt(PF_all_topo,varnames=c("Subject","Region"))
reshape2::melt(PF_all_topo, varnames=c("Subject","Region","Peak"))
reshape2::melt(PF_all_topo, varnames=c("Subject","Region"))
Peak_long <- reshape2::melt(PF_all_topo, varnames=c("Subject","Region"))
Peak_long$group <- rep("BP",20)
rep("BP",20)
c(rep("BP",20),rep("BP",33))
c(rep("BP",20),rep("HC",33))
rep(c(c(rep("BP",20),rep("HC",33))),4)
Peak_long$group <- rep(c(c(rep("BP",n_bp),rep("HC",n_hc))),4)
Peak_long
library(afex)
afex::aov_car(value ~ Region * group)
afex::aov_car(value ~ Region * group, data = Peak_long)
help("aov_car")
str(Peak_long)
aov_result <- aov_car(
value ~ group * Region + Error(Subject/Region),
data = Peak_long,
factorize = FALSE  # optional if factors are already set
)
aov_result
summary(aov_result)
library(emmeans)
emmeans(aov_result, ~ Region | group)
> emmeans(aov_result, ~ Region | group)
> emmeans(aov_result, ~ Region | group)
# Store the emmeans object
em <- emmeans(aov_result, ~ Region | group)
# Get pairwise comparisons WITHIN each group (e.g., BP: trans_self vs uni_self, etc.)
pairs(em)
library(ggplot2)
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
theme_minimal()
library(ggplot2)
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
theme_minimal()
BP <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_BP.mat")
n_bp <- 20
PF_whole_bp <- t(sapply(BP$PF.all.slow5[1:n_bp], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
HC <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_HC.mat")
n_hc <- 33
PF_whole_hc <- t(sapply(HC$PF.all.slow5[1:n_hc], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
PF_whole_all <- rbind(PF_whole_bp,PF_whole_hc)
mask_list <- list(trans_self = NeuroMyelFC::trans_self,
trans_nonself = NeuroMyelFC::trans_nonself,
uni_self = NeuroMyelFC::uni_self,
uni_nonself = NeuroMyelFC::uni_nonself )
PF_all_topo <- sapply(mask_list, function(mask) {
rowMeans(PF_whole_all[,mask])
})
Peak_long <- reshape2::melt(PF_all_topo, varnames=c("Subject","Region"))
Peak_long$group <- rep(c(c(rep("BP",n_bp),rep("HC",n_hc))),4)
aov_result <- aov_car(
value ~ group * Region + Error(Subject/Region),
data = Peak_long,
factorize = FALSE  # optional if factors are already set
)
summary(aov_result)
library(emmeans)
# Store the emmeans object
em <- emmeans(aov_result, ~ Region | group)
# Get pairwise comparisons WITHIN each group (e.g., BP: trans_self vs uni_self, etc.)
pairs(em)
library(ggplot2)
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
theme_minimal()
em <- emmeans(aov_result, ~ group | Region)
pairs(em)
library(ggplot2)
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
labs(ylab="Peak Frequency")
theme_minimal()
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
labs(ylab="Peak Frequency")+
theme_minimal()
library(ggplot2)
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
labs(y="Peak Frequency")+
theme_minimal()
library(ggplot2)
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
labs(y="Peak Frequency", title = "Slow5")+
theme_minimal()
BP <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_BP.mat")
n_bp <- 20
PF_whole_bp <- t(sapply(BP$PF.all.slow4[1:n_bp], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
HC <- readMat("/home/kaanka5312/projects/FrequencySliding/data/output/PF_HC.mat")
n_hc <- 33
PF_whole_hc <- t(sapply(HC$PF.all.slow4[1:n_hc], function(x) {
x[[1]]["PF.whole", 1, 1][[1]]
}))
PF_whole_all <- rbind(PF_whole_bp,PF_whole_hc)
###### Masking #######
mask_list <- list(trans_self = NeuroMyelFC::trans_self,
trans_nonself = NeuroMyelFC::trans_nonself,
uni_self = NeuroMyelFC::uni_self,
uni_nonself = NeuroMyelFC::uni_nonself )
PF_all_topo <- sapply(mask_list, function(mask) {
rowMeans(PF_whole_all[,mask])
})
Peak_long <- reshape2::melt(PF_all_topo, varnames=c("Subject","Region"))
Peak_long$group <- rep(c(c(rep("BP",n_bp),rep("HC",n_hc))),4)
aov_result <- aov_car(
value ~ group * Region + Error(Subject/Region),
data = Peak_long,
factorize = FALSE  # optional if factors are already set
)
summary(aov_result)
library(emmeans)
# Store the emmeans object
em <- emmeans(aov_result, ~ Region | group)
# Get pairwise comparisons WITHIN each group (e.g., BP: trans_self vs uni_self, etc.)
pairs(em)
library(ggplot2)
ggplot(Peak_long, aes(x = Region, y = value, color = group, group = group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
position = position_dodge(width = 0.2)) +
labs(y="Peak Frequency", title = "Slow4")+
theme_minimal()
